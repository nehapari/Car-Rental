// Import required modules
const express = require('express');
const bodyParser = require('body-parser');
const app = express();

// Middleware
app.use(bodyParser.json());

// In-memory database simulation
let cars = [
    { id: 1, model: 'Toyota Corolla', price: 40, available: true },
    { id: 2, model: 'Honda Civic', price: 50, available: true },
    { id: 3, model: 'Ford Mustang', price: 100, available: false }
];

let bookings = [];

// Routes

// Get all cars
app.get('/cars', (req, res) => {
    res.json(cars);
});

// Get available cars
app.get('/cars/available', (req, res) => {
    const availableCars = cars.filter(car => car.available);
    res.json(availableCars);
});

// Add a new car
app.post('/cars', (req, res) => {
    const { model, price, available } = req.body;
    const newCar = { id: cars.length + 1, model, price, available };
    cars.push(newCar);
    res.status(201).json(newCar);
});

// Rent a car
app.post('/rent', (req, res) => {
    const { carId, customerName, rentalDays } = req.body;

    const car = cars.find(c => c.id === carId);
    if (!car) {
        return res.status(404).json({ message: 'Car not found' });
    }

    if (!car.available) {
        return res.status(400).json({ message: 'Car is not available' });
    }

    const totalCost = car.price * rentalDays;
    bookings.push({
        id: bookings.length + 1,
        carId,
        customerName,
        rentalDays,
        totalCost
    });

    car.available = false;
    res.status(201).json({ message: 'Car rented successfully', totalCost });
});

// Return a car
app.post('/return', (req, res) => {
    const { carId } = req.body;

    const car = cars.find(c => c.id === carId);
    if (!car) {
        return res.status(404).json({ message: 'Car not found' });
    }

    if (car.available) {
        return res.status(400).json({ message: 'Car is already available' });
    }

    car.available = true;
    res.json({ message: 'Car returned successfully' });
});

// Get all bookings
app.get('/bookings', (req, res) => {
    res.json(bookings);
});

// Start the server
const PORT = 3000;
app.listen(PORT, () => {
    console.log(`Server is running on http://localhost:${PORT}`);
});
